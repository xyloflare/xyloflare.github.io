---
import Layout from "../../layouts/Layout.astro"
---
<Layout>
  <canvas id="tc">
  </canvas>
</Layout>
<script >
  import * as THREE from "three";
  import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
  import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
  const modelfile = "/model.glb";

  function main() {
    const canvas = document.querySelector('#tc');
    const renderer = new THREE.WebGLRenderer({antialias: true, canvas, alpha: true});
    const target = new THREE.Vector3(0.5,1,1)
    const initialCameraPosition = new THREE.Vector3(
      20 * Math.sin(0.2 * Math.PI),
      10,
      20 * Math.cos(0.2 * Math.PI)
    )
    const scale = 2;
    const camera = new THREE.OrthographicCamera(
      -scale,
      scale,
      scale,
      -scale,
      1,
      80
    )
    
    camera.position.copy(initialCameraPosition)
    camera.lookAt(target)

    const scene = new THREE.Scene();

    const dirLight = new THREE.DirectionalLight( 0xffffff, 2 );
    dirLight.position.set( -10, 10, -10 );
    scene.add( dirLight );

    const ambientLight = new THREE.AmbientLight(0xcccccc, Math.PI)
    scene.add(ambientLight)

    const controls = new OrbitControls(camera, renderer.domElement)
    controls.autoRotate = true
    controls.target = target

    const loader = new GLTFLoader();
    loader.load(modelfile, function ( gltf ) {
			let model = gltf.scene;
			scene.add( model );
      animate()
		}, undefined, function ( e ) {
			console.error( e );
		} )
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(canvas?.clientWidth, canvas?.clientHeight)
    let req = null
    let frame = 0
    const animate = () => {
      req = requestAnimationFrame(animate)
      frame = frame <= 100 ? frame + 1 : frame
      if (frame <= 100) {
        const p = initialCameraPosition
        const rotSpeed = -easeOutCirc(frame / 120) * Math.PI * 21
        camera.position.y = 10
        camera.position.x =
          p.x * Math.cos(rotSpeed) + p.z * Math.sin(rotSpeed)
        camera.position.z =
          p.z * Math.cos(rotSpeed) - p.x * Math.sin(rotSpeed)
        camera.lookAt(target)
      } else {
        controls.update()
      }
      renderer.render(scene, camera)
    }
    function easeOutCirc(x) {
      return Math.sqrt(1 - Math.pow(x - 1, 4))
    }
  }
  main()
</script>
<style>
#tc {
  width: 25rem;
  height: 25rem;
  aspect-ratio: 1;
}
</style>
